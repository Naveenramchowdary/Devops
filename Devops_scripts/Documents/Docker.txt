

-------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------

                                 DOCKER   INSTALLATION 


------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------


Uninstall old versions

    sudo yum remove docker \
                  docker-common \
                  docker-selinux \
                  docker-engine

 The Docker CE package is now called docker-ce.


 Install Docker CE

  Install using the repository

   Set up the repository

    Install required packages. "yum-utils" provides the yum-config-manager utility, and "device-mapper-persistent-data" and "lvm2" are required by the devicemapper storage driver.

    sudo yum install -y yum-utils \
    device-mapper-persistent-data \
    lvm2


Use the following command to set up the stable repository.



sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

Optional: Enable the edge and test repositories.

sudo yum-config-manager --enable docker-ce-edge

sudo yum-config-manager --enable docker-ce-test


Install Docker CE

    Install the latest version of Docker CE, or go to the next step to install a specific version.

    $ sudo yum install docker-ce

In production systems, you should install a specific version of Docker CE instead of always using the latest. List the available versions.

yum list docker-ce --showduplicates | sort -r

sudo yum install <FULLY-QUALIFIED-PACKAGE-NAME>  || docker-ce-17.06.1.ce.


Start Docker.

   sudo systemctl start docker

Verify that docker is installed correctly by running the hello-world image.

   sudo docker run hello-world

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

                                  UNINSTALL DOCKER CE
-----------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------

Uninstall Docker CE

  Uninstall the docker package

     $ sudo yum remove docker-ce


 Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete  all images, containers, and volumes:

     $ sudo rm -rf /var/lib/docker




--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                          DOCKER  COMMANDS                                                          

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


docker ps

docker run 






------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                     DOCKER DOCUMENTARY 

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


In Docker's case, having modern Linux kernel features, such as controlgroups and namespaces, means that containers can have strong isolation, their own network and storage stacks, as well as resource management capabilities to
allow friendly co-existence of multiple containers on a host.

It was written by the team at Docker, Inc (formerly dotCloud Inc,an early player in the Platform-as-a-Service (PAAS)
market, and released by the munder the Apache 2.0 license.


Docker components
Let's look at the core components that compose Docker:
The Docker client and server

•Docker Images
•Registries
•Docker Containers

Docker is a client-server application.
The Docker client talks to the Docker server or daemon, which, in turn, does all the work. 

You can run the Docker daemon and client on the same host.

Connect your local Docker client to a remote daemon running on another host.

Docker images

Images are the building blocks of the Docker world. You launch your containers from images. Images are the "build" part of Docker's life cycle.

Images live inside repositories, and repositories live on registries.


Registries

Docker stores the images you build in registries. There are two types of registries:
public and private. 

DOCKER TECHNICAL COMPONENTS

Docker uses native lxc format

Linux kernel namespaces, which provide isolation for filesystems, processes, and networks.

Filesystem isolation: each container is its own root filesystem.

Process isolation: each container runs in its own process environment.

Network isolation: separate virtual interfaces and IP addressing between containers.

Resource isolation and grouping: resources like CPU and memory are allo-cated individually to each Docker container using the cgroups, or control groups, kernel feature.

Logging:STDOUT,STDERR and STDIN from the container are collected, logged,and available for analysis or trouble-shooting.

Interactive shell: You can create a pseudo-tty and attach to STDIN
to provide interactive shell.


docker run

docker run -i -t --name -d  ubuntu /bin/bash

i -- interactive STDIN open from container

t --pseudo-tty

d -- daemonize (background)

/bin/bash --- command to be executed


docker attach <container name>  ----> brings to container bash

docker logs <container name>  -f flag like tail  -t for timestamp

docker top <container name> for checking process 

docker inspect <container name> for container info

docker stop <container name >  sends sigterm signal / docker kill <con name > send sigkill

docker rm `docker ps -a -q` ----> Deletes all containers 

 You'll find all your containers in the  /var/lib/docker/containers


 docker pull ---> To pull images 

 docker search ---> To search images

 docker commit ID User/name 

 docker build -t="repo/name" .(path)

 docker build  --no-cache

 docker history to check history

 -d -H tcp://0.0.0.0:2376 --tlsverify -- ↩
tlscacert=/etc/docker/ca.pem --tlscert=/etc/docker/server-cert. ↩
pem --tlskey=/etc/docker/server-key.pem





------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

                                               DOCKER MACHINE

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


docker-machine  create --driver generic --generic-ip-address 192.168.0.7 --generic-ssh-user naveen --generic-ssh-key /home/naveen/.ssh/id_rsa test5

INSTALL DOCKER CLIENT AND DOCKER MACHINE AND DOCKER COMPOSE ON THE MACHINE USING FOR DOCKER MACHINE

INSTALL DOCKER- CE ON OTHER MACHINE 

MAKE GETENFORCE ZERO STOP FIREWALLD

sudo yum install -y yum-utils \
    device-mapper-persistent-data \
    lvm2

sudo yum-config-manager \
  --add-repo \
  https://download.docker.com/linux/centos/docker-ce.repo


CREATE A USER WITH SUDO PRIVILEGES ON BOTH MACHINES

COPY THE SSH KEY TO THE MACHINE WE NEED TO RUN OUR COMMANDS SO THAT WE CAN LOGIN WITHOUT PASSWD

ssh-copy-id  user@192.168.11.2


RUN IN DOCKER MACHINE THESE COMMANDS TO ADD A HOST TO DOCKER MACHINE

docker-machine  create --driver generic --generic-ip-address 192.168.0.7 --generic-ssh-user naveen --generic-ssh-key /home/naveen/.ssh/id_rsa test

TO CHECK CONNECTED MACHINES
docker-machine ls

TO REGENERATE CERTIFICATES
docker-machine regenerate-certs swarm

TO MAKE A DOCKER MACHINE ACTIVE TO RUN COMMANDS
eval $(docker-machine env test)


TO TEST THE CONNECTION 

docker info

docker run hello-world



TO CREATE A AWS MACHINE WITH DOCKER MACHINE USE AMAZONEC2 DRIVER 

docker-machine create --driver amazonec2 --amazonec2-access-key $AWS_ACCESS_KEY_ID --amazonec2-secret-key=$AWS_SECRET_ACCESS_KEY --amazonec2-open-port 8000 --amazonec2-region us-west-2 --amazonec2-instance-type "t2.micro" --amazonec2-ami ami-223f945a --amazonec2-ssh-user ec2-user awsdocker

It creates a docker-machine security group
